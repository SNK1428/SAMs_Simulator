#-------------------------------------------------------------
# 文件
device_data_path = /mnt/e/Files/Code/cross_plateform/C_C++/code_new/Data/input/selectTxt_unix_original_for_new_code.txt
mole_device_data_path = /mnt/e/Files/Code/cross_plateform/C_C++/code_new/Data/input/selectTxt_SAM_mole_filted.txt
mole_onehot_data_path = /mnt/e/Files/Code/cross_plateform/C_C++/code_new/Data/input/molecule_collection_encoded_filted.txt
# maps存放文件夹
map_file_root = /mnt/e/Files/Code/cross_plateform/C_C++/code_new/Data/maps 
# 输出数据文件夹
output_dir = /mnt/e/Files/Code/cross_plateform/C_C++/code_new/Data/output
# 存储onehot数据的文件夹
onehot_dir_root = /mnt/e/Files/Code/cross_plateform/C_C++/code_new/Data/onehot_data
# 23列分子符号文件夹
col_23_config_file_path = /mnt/e/Files/Code/cross_plateform/C_C++/code_new/Data/config/col_23_words.txt 

#-------------------------------------------------------------
# 是否使用已经建构的maps，0 代表不用，则重新生成maps到指定目录 1 代表使用
using_exist_maps = 1 

# 处理分子/电池数据 0 处理SAMs数据 1 处理电池数据 
device_data = 1

# 数据保留尺度
device_data_reserve_ratio = 1

# ------------------------------------------------------------
# 列种类
sing_col = 0,1,2,4,5,6,7,8,9,10,14,15,16,17,18,19,21,22,24,25,27,29,35,38,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63
sing_multi_col = 13,20,23,26,28,30,31,41,43,44
hybrid_multi_col = 3,11,12,32,33,34,36,37,39,40,42
full_structure_col = 3      # 本列包含完整的器件结构，但本项目不使用此列，而是通过子结构进行组合

num_col = 1,4,5,10,20,26,29,34,36,37,43,49,51,52,53,54,55,56,57,58,59
JV_col = 52,53,54,55,56,57,58,59
# col 23 指定钙钛矿组成表达式是哪个列
expression_col = 23

# 序列组
sequence_block = [[11],[12,13],[30,31,32,33,34],[36,37],[39,41],[42,43,44]]

# col 2 (years col) 指定年文件夹是哪一列
years_col = 1

tl_layer_transparent = 12
tl_layer_metal_Pole = 39
transparent_pole_layer = 11
metal_pole_layer = 42
#-------------------------------------------------------------
# 预先过滤数据的JV参数范围
Voc_range = 0,10
Isc_range = 0,30
FF_range = 0,1
PCE_range = 0,30

#-------------------------------------------------------------
maps_size = 20,0,200,300,0,0,7,2,2,2,0,40,767,51,2,3,3,3,3,0,3,3,3,90,3,3,0,3,9,0,34,4,26,38,0,3,0,0,0,900,54,38,46,0,23,3,3,3,3,0,3,0,0,0,0,0,0,0,0,1,1,1,1,2 
# maps_size = 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 
# maps_size = 5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000
# 每一列填充数据长度（总列填充长度）
onehot_size = 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 
# block 尺寸
block_size = 1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 
# 数字单行尺寸
sequence_size = 0

# ------------------------------------------------------------
# 数据生成配置
data_generator = [[1],[2],[3],[4],[5]]
